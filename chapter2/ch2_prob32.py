#Problem 32: Write a function mutate to compute all words generated by a single mutation on a given word. A mutation is defined as inserting a character, deleting a character, replacing a character, or swapping 2 consecutive characters in a string. For simplicity consider only letters from a to z.

import string

alphabet=list(string.ascii_lowercase)

def mutate(a):
	words=[]
	#removing a letter
	for i in range(len(a)):
		rem=list(a)
		c=rem.pop(i)
		words.append(('').join(rem))
	#replacing a letter
	alist=list(a)
	for i in range(len(alist)):
		alist=list(a)
		for j in alphabet:
			alist[i]=j
			words.append(('').join(alist))
	#inserting a character
	for i in alphabet:
		alist=list(a)
		words.append(('').join(list(i)+alist))
		alist=list(a)
		words.append(('').join(alist+list(i)))
		alist=list(a)
		for j in range(1,len(alist)):
			words.append(('').join(list(alist[0:j])+list(i)+list(a[j:])))
	#swapping consecutive characters
	alist=list(a)
	for i in range(len(alist)-1):
		alist[i+1],alist[i]=alist[i],alist[i+1]
		words.append(('').join(alist))
		alist=list(a)
	return set(words)	 

def main():
	mutated=mutate('hello')
	print 'helo' in mutated

if __name__ == '__main__':
    main()
